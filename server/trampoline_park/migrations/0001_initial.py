# Generated by Django 5.1.4 on 2025-03-27 09:14

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CoachAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Достижение')),
            ],
            options={
                'verbose_name': 'Достижение тренера',
                'verbose_name_plural': 'Достижения тренера',
            },
        ),
        migrations.CreateModel(
            name='CoachCostume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('coach_costume_picture', models.FileField(upload_to='coach_costume_picture', verbose_name='Фото')),
                ('price', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Цена')),
            ],
            options={
                'verbose_name': 'Костюм тренера',
                'verbose_name_plural': 'Костюмы тренера',
            },
        ),
        migrations.CreateModel(
            name='CoachSpecialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Специальность')),
            ],
            options={
                'verbose_name': 'Специальность тренера',
                'verbose_name_plural': 'Специальности тренера',
            },
        ),
        migrations.CreateModel(
            name='Communication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('link', models.URLField()),
                ('icon', models.FileField(upload_to='icons')),
            ],
            options={
                'verbose_name': 'Социальная сеть',
                'verbose_name_plural': 'Социальные сети',
            },
        ),
        migrations.CreateModel(
            name='OptionalService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название услуги')),
                ('optional_service_picture', models.FileField(upload_to='optional_service_pictures', verbose_name='Фото')),
                ('price', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Цена')),
            ],
            options={
                'verbose_name': 'Дополнительная услуга',
                'verbose_name_plural': 'Дополнительные услуги',
            },
        ),
        migrations.CreateModel(
            name='PhotoVideoServicePrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photographer_price', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Цена фотографа')),
                ('videographer_price', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Цена видеографа')),
            ],
            options={
                'verbose_name': 'Цена фото/видео услуг',
                'verbose_name_plural': 'Цены фото/видео услуг',
            },
        ),
        migrations.CreateModel(
            name='TypeOptionalService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Тип дополнительной услуги')),
            ],
            options={
                'verbose_name': 'Тип дополнительной услуги',
                'verbose_name_plural': 'Типы дополнительных услуг',
            },
        ),
        migrations.CreateModel(
            name='VideoWarmUp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='video_warm_up', verbose_name='Видеоразминка')),
            ],
            options={
                'verbose_name': 'Видеоразминка',
            },
        ),
        migrations.CreateModel(
            name='WorkoutType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название тренировки')),
                ('description', models.TextField(max_length=300, verbose_name='Описание тренировки')),
                ('price', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Цена')),
                ('workout_picture', models.FileField(upload_to='workout_pictures', verbose_name='Фото')),
                ('duration', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Продолжительность')),
                ('max_clients', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Максимальное количество клиентов')),
            ],
            options={
                'verbose_name': 'Тип тренировки',
                'verbose_name_plural': 'Типы тренировок',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('role', models.CharField(choices=[('CLIENT', 'CLIENT'), ('COACH', 'COACH'), ('ADMIN', 'ADMIN')], default='ADMIN', max_length=50, verbose_name='Роль пользователя')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=50, verbose_name='Фамилия')),
                ('date_of_birth', models.DateField(verbose_name='Дата рождения')),
                ('phone_number', models.CharField(max_length=20, unique=True, verbose_name='Номер телефона')),
                ('profile_picture', models.FileField(blank=True, null=True, upload_to='profile_pictures', verbose_name='Фотография профиля')),
                ('is_healthy', models.BooleanField(verbose_name='Сведения о здорвье')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
            },
        ),
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=50, verbose_name='Фамилия')),
                ('date_of_birth', models.DateField(verbose_name='Дата рождения')),
                ('phone_number', models.CharField(max_length=20, unique=True, verbose_name='Номер телефона')),
                ('profile_picture', models.FileField(upload_to='profile_pictures', verbose_name='Фото профиля')),
                ('experience', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Стаж')),
                ('quote', models.TextField(max_length=300, null=True, verbose_name='Цитата')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('achievements', models.ManyToManyField(to='trampoline_park.coachachievement', verbose_name='Достижения')),
                ('specialties', models.ManyToManyField(to='trampoline_park.coachspecialty', verbose_name='Специальности')),
            ],
            options={
                'verbose_name': 'Тренер',
                'verbose_name_plural': 'Тренеры',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название мероприятия')),
                ('date', models.DateField(verbose_name='Дата')),
                ('event_start_time', models.TimeField(verbose_name='Время начала')),
                ('event_end_time', models.TimeField(verbose_name='Время конца')),
                ('is_photographer', models.BooleanField(verbose_name='Услуги фотографа')),
                ('is_videographer', models.BooleanField(verbose_name='Услуги видеографа')),
                ('clients', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trampoline_park.client', verbose_name='Клиент')),
                ('coach', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='trampoline_park.coach', verbose_name='Тренер')),
                ('coach_costume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trampoline_park.coachcostume', verbose_name='Костюм')),
                ('optional_service', models.ManyToManyField(blank=True, to='trampoline_park.optionalservice', verbose_name='Дополнительные услуги')),
            ],
            options={
                'verbose_name': 'Мероприятие',
                'verbose_name_plural': 'Мероприятия',
            },
        ),
        migrations.AddField(
            model_name='optionalservice',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trampoline_park.typeoptionalservice', verbose_name='Тип услуги'),
        ),
        migrations.CreateModel(
            name='Workout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(verbose_name='Дата и время')),
                ('clients', models.ManyToManyField(blank=True, to='trampoline_park.client', verbose_name='Клиент(ы)')),
                ('coach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trampoline_park.coach', verbose_name='Тренер')),
                ('workout_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trampoline_park.workouttype', verbose_name='Тип тренировки')),
            ],
            options={
                'verbose_name': 'Тренировка',
                'verbose_name_plural': 'Тренировки',
            },
        ),
    ]
